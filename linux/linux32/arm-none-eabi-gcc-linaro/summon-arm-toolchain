#!/bin/bash
# Written by Uwe Hermann <uwe@hermann-uwe.de>, released as public domain.
# Modified by Piot Esden-Tempski <piotr@esden.net>, released as public domain.
# Modified by Poine <poinix@gmail.com>, released as public domain

TARGET=arm-none-eabi		          # Or: TARGET=arm-none-eabi
PREFIX=/opt/paparazzi/stm32               # Install location of your final toolchain
PARALLEL=""			          # Or: PARALLEL="-j 5" for 4 CPU's
DARWIN_OPT_PATH=/opt/local                # Path in which MacPorts or Fink is installed

#BINUTILS=binutils-2.20.1
BINUTILS=binutils-2.19.1
#GCC=gcc-4.5.1
#GCC=gcc-4.5.0
GCC=gcc-4.4.3
#GCC=gcc-4.4.0
NEWLIB=newlib-1.17.0
GDB=gdb-7.1
#GDB=gdb-6.8
LIBCMSIS=v1.10-2
LIBSTM32=v3.0.0-1
LIBSTM32USB=v3.0.1-1
LIBSTM32_EN=1
LIBOPENSTM32_EN=0
LIBOPENSTM32=master
OPENOCD=openocd-mygit
#OPENOCD=openocd-0.4.0

LOCAL_MIRROR=/home/poine/sources_paparazzi_packages/stm32


export PATH="${PREFIX}/bin:${PATH}"

BUILDLOG=`pwd`/my_log

case "$(uname)" in
	Linux)
	echo "Found Linux OS."
	GCCFLAGS=
	GDBFLAGS=
	;;
	Darwin)
	echo "Found Darwin OS."
	GCCFLAGS="--with-gmp=${DARWIN_OPT_PATH} \
	          --with-mpfr=${DARWIN_OPT_PATH} \
		  -with-libiconv-prefix=${DARWIN_OPT_PATH}"
        GDBFLAGS="--disable-werror"
	;;
	*)
	echo "Found Unknown OS. Aborting!"
	exit 1
	;;
esac

if [ ! -e sources ]; then
    mkdir sources
fi

# look for local archives before trying to download
if [ -e ${LOCAL_MIRROR} ]; then
    cp -a ${LOCAL_MIRROR}/* ./sources
fi

cd sources
if [ ! -e ${BINUTILS}.tar.bz2 ]; then
	echo "Downloading binutils sources..."
	wget -c http://ftp.gnu.org/gnu/binutils/${BINUTILS}.tar.bz2
else
        echo "Using local cached binutils sources..."
fi

if [ ! -e ${GCC}.tar.bz2 ]; then
	echo "Downloading gcc sources..."
	wget -c http://ftp.gnu.org/gnu/gcc/${GCC}/${GCC}.tar.bz2
else
       echo "Using local cached gcc sources..."
fi

if [ ! -e ${NEWLIB}.tar.gz ]; then
	echo "Downloading newlib sources..."
	wget -c ftp://sources.redhat.com/pub/newlib/${NEWLIB}.tar.gz
else
       echo "Using local cached newlib sources..."
fi

if [ ! -e ${GDB}.tar.bz2 ]; then
	echo "Downloading gdb sources..."
	wget -c http://ftp.gnu.org/gnu/gdb/${GDB}.tar.bz2
else
       echo "Using local cached gdb sources..."
fi

if [ ${LIBSTM32_EN} != 0 ]; then
if [ ! -e libcmsis-${LIBCMSIS}.tar.bz2 ]; then
	echo "Cloning libcmsis sources..."
	git clone git://git.open-bldc.org/libcmsis.git
        cd libcmsis
        git archive --format=tar --prefix=libcmsis-${LIBCMSIS}/ ${LIBCMSIS} | \
            bzip2 --stdout > ../libcmsis-${LIBCMSIS}.tar.bz2
        cd ..
        rm -rf libcmsis
else
       echo "Using local cached libcmsis sources..."
fi

if [ ! -e libstm32-${LIBSTM32}.tar.bz2 ]; then
	echo "Cloning libstm32 sources..."
	git clone git://git.open-bldc.org/libstm32.git
        cd libstm32
        git archive --format=tar --prefix=libstm32-${LIBSTM32}/ ${LIBSTM32} | \
            bzip2 --stdout > ../libstm32-${LIBSTM32}.tar.bz2
        cd ..
        rm -rf libstm32
else
       echo "Using local cached libstm32 sources..."
fi

if [ ! -e libstm32usb-${LIBSTM32USB}.tar.bz2 ]; then
	echo "Cloning libstm32usb sources..."
	git clone git://git.open-bldc.org/libstm32usb.git
        cd libstm32usb
        git archive --format=tar --prefix=libstm32usb-${LIBSTM32USB}/ ${LIBSTM32USB} | \
            bzip2 --stdout > ../libstm32usb-${LIBSTM32USB}.tar.bz2
        cd ..
        rm -rf libstm32usb
else
       echo "Using local cached libstm32usb sources..."
fi
fi

if [ ${LIBOPENSTM32_EN} != 0 ]; then
if [ ! -e libopenstm32-${LIBOPENSTM32}.tar.bz2 ]; then
	echo "Cloning libopenstm32 sources..."
	git clone git://libopenstm32.git.sourceforge.net/gitroot/libopenstm32
        cd libopenstm32
        git archive --format=tar --prefix=libopenstm32-${LIBOPENSTM32}/ ${LIBOPENSTM32} | \
            bzip2 --stdout > ../libopenstm32-${LIBOPENSTM32}.tar.bz2
        cd ..
        rm -rf libopenstm32
fi
fi

if [ ! -e ${OPENOCD}.tar.bz2 ]; then
	echo "Cloning openocd sources..."
	git clone git://openocd.git.sourceforge.net/gitroot/openocd/openocd
        pushd openocd
        git checkout 28ddefd0659048773fd6066d0265fca76ca036d5	
        git archive --format=tar --prefix=${OPENOCD}/ master | \
            bzip2 --stdout > ../${OPENOCD}.tar.bz2
        popd
        rm -rf openocd
#	echo "Downloading openocd sources..."
#	wget -c http://downloads.sourceforge.net/project/openocd/openocd/0.4.0/${OPENOCD}.tar.bz2?use_mirror=hivelocity
#       piotr patch august 4 2010 : 28ddefd0659048773fd6066d0265fca76ca036d5
#       previous patch 2a17fd9f9b51516a830ba4b3ae2f2284929ff266
else
       echo "Using local cached openocd sources..."
fi

cd ..

if [ ! -e build ]; then
    mkdir build
fi

if [ ! -e .${BINUTILS}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking ${BINUTILS}"
    echo "******************************************************************"
    tar xfj sources/${BINUTILS}.tar.bz2
    cd build
    echo "******************************************************************"
    echo "* Configuring ${BINUTILS}"
    echo "******************************************************************"
    ../${BINUTILS}/configure --target=${TARGET} \
                             --prefix=${PREFIX} \
                             --enable-interwork \
                             --enable-multilib \
	                     --with-gnu-as \
                             --with-gnu-ld \
                             --disable-nls \
                             --disable-werror >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Building ${BINUTILS}"
    echo "******************************************************************"
    make ${PARALLEL} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing ${BINUTILS}"
    echo "******************************************************************"
    make install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up ${BINUTILS}"
    echo "******************************************************************"
    touch .${BINUTILS}.build
    rm -rf build/* ${BINUTILS}
fi

if [ ! -e .${GCC}-boot.build ]; then
    echo "******************************************************************"
    echo "* Unpacking ${GCC}-boot"
    echo "******************************************************************"
    tar xfj sources/${GCC}.tar.bz2
    cd build
    echo "******************************************************************"
    echo "* Configuring ${GCC}-boot"
    echo "******************************************************************"
    ../${GCC}/configure --target=${TARGET} \
                        --prefix=${PREFIX} \
                        --enable-interwork \
                        --enable-multilib \
                        --enable-languages="c" \
                        --with-newlib \
	                --with-cpu=cortex-m3 \
                        --with-tune=cortex-m3 \
                        --with-mode=thumb \
                        --with-float=soft \
	                --without-headers \
                        --with-gnu-as \
                        --with-gnu-ld \
                        --disable-nls \
                        --disable-shared \
                        --disable-threads \
		      ${GCCFLAGS} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Building ${GCC}-boot"
    echo "******************************************************************"
    make ${PARALLEL} all-gcc  >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing ${GCC}-boot"
    echo "******************************************************************"
    make install-gcc >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up ${GCC}-boot"
    echo "******************************************************************"
    touch .${GCC}-boot.build
    rm -rf build/* ${GCC}
fi

if [ ! -e .${NEWLIB}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking ${NEWLIB}"
    echo "******************************************************************"
    tar xfz sources/${NEWLIB}.tar.gz
    cd build
    echo "******************************************************************"
    echo "* Configuring ${NEWLIB}"
    echo "******************************************************************"
    ../${NEWLIB}/configure --target=${TARGET} \
                           --prefix=${PREFIX} \
                           --enable-interwork \
                           --enable-multilib \
                           --with-gnu-as \
                           --with-gnu-ld \
                           --disable-nls \
	                   --disable-shared \
                           --disable-newlib-supplied-syscalls >> ${BUILDLOG}  2>&1 || exit
    echo "******************************************************************"
    echo "* Building ${NEWLIB}"
    echo "******************************************************************"
    make ${PARALLEL} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing ${NEWLIB}"
    echo "******************************************************************"
    make install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up ${NEWLIB}"
    echo "******************************************************************"
    touch .${NEWLIB}.build
    rm -rf build/* ${NEWLIB}
fi

# Yes, you need to build gcc again!
if [ ! -e .${GCC}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking ${GCC}"
    echo "******************************************************************"
    tar xfj sources/${GCC}.tar.bz2
    cd build
    echo "******************************************************************"
    echo "* Configuring ${GCC}"
    echo "******************************************************************"
    ../${GCC}/configure --target=${TARGET} \
                        --prefix=${PREFIX} \
                        --enable-interwork \
                        --enable-multilib \
                        --enable-languages="c" \
                        --with-newlib \
	                --with-float=soft \
	                --with-cpu=cortex-m3 \
                        --with-tune=cortex-m3 \
                        --with-mode=thumb \
                        --disable-shared \
	                --disable-threads \
		        --disable-nls \
                        --with-gnu-as \
                        --with-gnu-ld \
		      ${GCCFLAGS} >> ${BUILDLOG}  2>&1 || exit
    echo "******************************************************************"
    echo "* Building ${GCC}"
    echo "******************************************************************"
    make ${PARALLEL} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing ${GCC}"
    echo "******************************************************************"
    make install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up ${GCC}"
    echo "******************************************************************"
    touch .${GCC}.build
    rm -rf build/* ${GCC}
fi

if [ ! -e .${GDB}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking ${GDB}"
    echo "******************************************************************"
    tar xfj sources/${GDB}.tar.bz2
    cd build
    echo "******************************************************************"
    echo "* Configuring ${GDB}"
    echo "******************************************************************"
    ../${GDB}/configure --target=${TARGET} \
                        --prefix=${PREFIX} \
                        --enable-interwork \
                        --enable-multilib  \
                        --disable-werror   \
		        ${GDBFLAGS} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Building ${GDB}"
    echo "******************************************************************"
    make ${PARALLEL} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing ${GDB}"
    echo "******************************************************************"
    make install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up ${GDB}"
    echo "******************************************************************"
    touch .${GDB}.build
    rm -rf build/* ${GDB}
fi

if [ ${LIBSTM32_EN} != 0 ]; then
if [ ! -e .libcmsis-${LIBCMSIS}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking libcmsis-${LIBCMSIS}"
    echo "******************************************************************"
    tar xfj sources/libcmsis-${LIBCMSIS}.tar.bz2
    cd libcmsis-${LIBCMSIS}
    echo "******************************************************************"
    echo "* Building libcmsis-${LIBCMSIS}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} 2>&1 >> ${BUILDLOG} || exit
    echo "******************************************************************"
    echo "* Installing libcmsis-${LIBCMSIS}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} install 2>&1 >> ${BUILDLOG} || exit
    cd ..
    PATCH_CMSIS=`pwd`/patch_libcmsis
    pushd ${PREFIX}
    patch -p2 < ${PATCH_CMSIS}
    popd
    echo "******************************************************************"
    echo "* Cleaning up libcmsis-${LIBCMSIS}"
    echo "******************************************************************"
    touch .libcmsis-${LIBCMSIS}.build
    rm -rf libcmsis-${LIBCMSIS}
fi

if [ ! -e .libstm32-${LIBSTM32}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking libstm32-${LIBSTM32}"
    echo "******************************************************************"
    tar xfj sources/libstm32-${LIBSTM32}.tar.bz2
    cd libstm32-${LIBSTM32}
    echo "******************************************************************"
    echo "* Patching libstm32-${LIBSTM32}"
    echo "******************************************************************"
    patch -p1 < ../patch_libstm32 >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Building libstm32-${LIBSTM32}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing libstm32-${LIBSTM32}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up libstm32-${LIBSTM32}"
    echo "******************************************************************"
    touch .libstm32-${LIBSTM32}.build
    rm -rf libstm32-${LIBSTM32}
fi

if [ ! -e .libstm32usb-${LIBSTM32USB}.build ]; then
    echo "******************************************************************"
    echo "* Unpacking libstm32usb-${LIBSTM32USB}"
    echo "******************************************************************"
    tar xfj sources/libstm32usb-${LIBSTM32USB}.tar.bz2
    cd libstm32usb-${LIBSTM32USB}
    echo "******************************************************************"
    echo "* Building libstm32usb-${LIBSTM32USB}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing libstm32usb-${LIBSTM32USB}"
    echo "******************************************************************"
    make arch_prefix=${TARGET} prefix=${PREFIX} install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up libstm32usb-${LIBSTM32USB}"
    echo "******************************************************************"
    touch .libstm32usb-${LIBSTM32USB}.build
    rm -rf libstm32usb-${LIBSTM32USB}
fi
fi

if [ $LIBOPENSTM32_EN != 0 ]; then
    echo "******************************************************************"
    echo "* Unpacking libopenstm32-${LIBOPENSTM32}"
    echo "******************************************************************"
    tar xfj sources/libopenstm32-${LIBOPENSTM32}.tar.bz2
    cd libopenstm32-${LIBOPENSTM32}
    echo "******************************************************************"
    echo "* Building libopenstm32-${LIBOPENSTM32}"
    echo "******************************************************************"
    make PREFIX=${TARGET} DESTDIR=${PREFIX} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************"
    echo "* Installing libopenstm32-${LIBOPENSTM32}"
    echo "******************************************************************"
    make PREFIX=${TARGET} DESTDIR=${PREFIX} install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************"
    echo "* Cleaning up libopenstm32-${LIBOPENSTM32}"
    echo "******************************************************************"
    touch .libopenstm32-${LIBOPENSTM32}.build
    rm -rf libopenstm32-${LIBOPENSTM32}
fi


if [ ! -e .${OPENOCD}.build ]; then
    echo "******************************************************************" | tee -a ${BUILDLOG}
    echo "* Unpacking openocd-${OPENOCD}"                                     | tee -a ${BUILDLOG}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    tar xfj sources/${OPENOCD}.tar.bz2
    cd ${OPENOCD}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    echo "* Configuring ${OPENOCD}"                                           | tee -a ${BUILDLOG}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    patch -p1 < ../patch_openocd
    ./bootstrap  >> ${BUILDLOG} 2>&1 || exit
    ./configure --prefix=${PREFIX} --enable-maintainer-mode \
                --enable-ft2232_libftdi >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************" | tee -a ${BUILDLOG}
    echo "* Building ${OPENOCD}"                                              | tee -a ${BUILDLOG}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    make ${PARALLEL} >> ${BUILDLOG} 2>&1 || exit
    echo "******************************************************************" | tee -a ${BUILDLOG}
    echo "* Installing ${OPENOCD}"                                            | tee -a ${BUILDLOG}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    make install >> ${BUILDLOG} 2>&1 || exit
    cd ..
    echo "******************************************************************" | tee -a ${BUILDLOG}
    echo "* Cleaning up ${OPENOCD}"                                           | tee -a ${BUILDLOG}
    echo "******************************************************************" | tee -a ${BUILDLOG}
    touch .${OPENOCD}.build
    rm -rf build/* ${OPENOCD}
fi
